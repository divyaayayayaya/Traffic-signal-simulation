import tkinter as tk
from PIL import Image, ImageTk
import cv2
import numpy as np
from ultralytics import YOLO

# Load YOLOv8 Model
model = YOLO("yolov8n.pt")

# Set your image file path here
IMAGE_PATH = "your_image.jpg"  # ðŸ”¹ Change this to your actual image path

class TrafficImageProcessorApp:
    def _init_(self, root):
        self.root = root
        self.root.title("Traffic Image Processor")
        self.root.geometry("900x700")
        self.root.configure(bg="#F5F5F5")

        # Label to Display Image
        self.canvas = tk.Label(root)
        self.canvas.pack()

        # Vehicle Count Label
        self.result_label = tk.Label(root, text="Traffic Density: 0 Vehicles", font=("Arial", 14))
        self.result_label.pack(pady=10)

        # Density Scale Bar
        self.density_label = tk.Label(root, text="Density Level: Low", font=("Arial", 14))
        self.density_label.pack()

        self.density_bar = tk.Canvas(root, width=300, height=30, bg="white")
        self.density_bar.pack(pady=10)
        self.density_fill = self.density_bar.create_rectangle(0, 0, 0, 30, fill="green")

        # Process the image on startup
        self.process_image(IMAGE_PATH)

    def process_image(self, file_path):
        # Read image using OpenCV
        image = cv2.imread(file_path)
        image_resized = cv2.resize(image, (640, 480))

        # Detect vehicles using YOLOv8
        results = model(image_resized)
        vehicle_count = sum(1 for obj in results[0].boxes.cls if obj in [2, 3, 5, 7])

        # Draw bounding boxes on detected vehicles
        for box in results[0].boxes.xyxy:
            x1, y1, x2, y2 = map(int, box)
            cv2.rectangle(image_resized, (x1, y1), (x2, y2), (0, 255, 0), 2)

        # Convert OpenCV image to Tkinter-compatible format
        image_rgb = cv2.cvtColor(image_resized, cv2.COLOR_BGR2RGB)
        img_pil = Image.fromarray(image_rgb)
        img_tk = ImageTk.PhotoImage(img_pil)

        # Display image
        self.canvas.config(image=img_tk)
        self.canvas.image = img_tk

        # Update vehicle count label
        self.result_label.config(text=f"Traffic Density: {vehicle_count} Vehicles")

        # Update Density Scale
        self.update_density_scale(vehicle_count)

    def update_density_scale(self, count):
        # Define density levels
        max_vehicles = 20  # Define maximum expected vehicle count for scaling
        density_percentage = min(count / max_vehicles, 1.0)

        # Update density bar width
        bar_width = int(300 * density_percentage)
        self.density_bar.coords(self.density_fill, 0, 0, bar_width, 30)

        # Update color based on density level
        if count <= 5:
            color, level = "green", "Low"
        elif count <= 10:
            color, level = "yellow", "Medium"
        else:
            color, level = "red", "High"

        self.density_bar.itemconfig(self.density_fill, fill=color)
        self.density_label.config(text=f"Density Level: {level}")

# Initialize Tkinter
root = tk.Tk()
app = TrafficImageProcessorApp(root)
root.mainloop()
